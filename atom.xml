<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Random Thoughts]]></title>
  <link href="http://imurchie.github.io/blog/atom.xml" rel="self"/>
  <link href="http://imurchie.github.io/blog/"/>
  <updated>2013-12-01T16:21:51-08:00</updated>
  <id>http://imurchie.github.io/blog/</id>
  <author>
    <name><![CDATA[Isaac Murchie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Interfaces]]></title>
    <link href="http://imurchie.github.io/blog/blog/2013/12/01/interfaces/"/>
    <updated>2013-12-01T16:20:13-08:00</updated>
    <id>http://imurchie.github.io/blog/blog/2013/12/01/interfaces</id>
    <content type="html"><![CDATA[<p>No, not a <a href="http://www.java.com/en/">Java</a> <a href="http://docs.oracle.com/javase/tutorial/java/concepts/interface.html"><code>interface</code></a>, but concpetually very similar. Java’s <code>interface</code> is basically the specification of the public face of a class. Ruby doesn’t have such a functionality explicitly built into it, though the design principle of writing to an “interface” still holds.</p>

<p>A Ruby class should provide a set of <code>public</code> methods which are the behaviours that it can be held accountable for. Other methods that are used by the objects of the class, or its descendents, can be made
<code>private</code> or <code>protected</code> in order to make them less accessible, and to signal that they are not supported, that there is no reasonable expectation of their being maintained throughout the development process.</p>

<p>Ruby’s privacy markers are actually methods in the <a href="http://ruby-doc.org/core-1.9.3/Module.html"><code>Module</code></a> class (which is the superclass of <a href="http://ruby-doc.org/core-1.9.3/Class.html"><code>Class</code></a>, and so within the class hierarchy of every class we, as programmers, define in our code). Without any arguments they set the privacy level until the next time one is called. With arguments they set the privacy level for the arguments, which are <a href="http://ruby-doc.org/core-1.9.3/Symbol.html"><code>Symbol</code></a> objects referring to methods names. These can be any method named, no matter what their privacy status. So in a subclass we can change it:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
</pre></td>
  <td class="code"><pre><span class="keyword">class</span> <span class="class">Test</span>
  <span class="keyword">def</span> <span class="function">hi</span>
    puts <span class="string"><span class="delimiter">&quot;</span><span class="content">hi</span><span class="delimiter">&quot;</span></span>
  <span class="keyword">end</span>

  private
    <span class="keyword">def</span> <span class="function">hello</span>
      puts <span class="string"><span class="delimiter">&quot;</span><span class="content">hello</span><span class="delimiter">&quot;</span></span>
    <span class="keyword">end</span>
<span class="keyword">end</span>

test = <span class="constant">Test</span>.new
test.hi
<span class="comment"># =&gt; hi</span>

test.hello
<span class="comment"># =&gt; NoMethodError: private method `hello' called for #&lt;Test:0x007fc2411c6578&gt;</span>
<span class="comment"># =&gt;     ...</span>

<span class="keyword">class</span> <span class="class">SubTest</span> &lt; <span class="constant">Test</span>
  public(<span class="symbol">:hello</span>)
<span class="keyword">end</span>

test = <span class="constant">SubTest</span>.new
test.hi
<span class="comment"># =&gt; hi</span>

test.hello
<span class="comment"># =&gt; hello</span>
</pre></td>
</tr></table>
</div>

<p>The subclass here, <code>SubTest</code>, does nothing other than set the privacy of <code>Test#hello</code> to <code>public</code>. Then instances of <code>SubTest</code> have this method in their public interface.</p>

<p>Another aspect of privacy in the Ruby object model is illustrated here. Unlike in Java, where <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html"><code>private</code></a> means that instances of the class have access and nothing else, in Ruby subclasses can access <code>private</code> methods without any problems. Indeed, “private” in Ruby means that the interpretter will not allow the method to be called with an explicit receiver. So within a subclass, where superclass methods are accessed directly, private methods are available! (But beware: you still cannot use <code>self</code>, even if it amounts to the same thing!)</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
</pre></td>
  <td class="code"><pre><span class="keyword">class</span> <span class="class">Test</span>
  <span class="keyword">def</span> <span class="function">hi</span>
    hello
  <span class="keyword">end</span>

  <span class="keyword">def</span> <span class="function">howdy</span>
    <span class="predefined-constant">self</span>.hello
  <span class="keyword">end</span>

  private
    <span class="keyword">def</span> <span class="function">hello</span>
      puts <span class="string"><span class="delimiter">&quot;</span><span class="content">hello</span><span class="delimiter">&quot;</span></span>
    <span class="keyword">end</span>
<span class="keyword">end</span>

test = <span class="constant">Test</span>.new
test = <span class="constant">Test</span>.hi
<span class="comment"># =&gt; hello</span>

test.howdy
<span class="comment"># =&gt; NoMethodError: private method `hello' called for #&lt;Test:0x007fc244cb5530&gt;</span>
<span class="comment"># =&gt;     ...</span>
</pre></td>
</tr></table>
</div>

<p>The call in <code>Test#howdy</code> is conceptually the same as that in <code>Test#hi</code>, but Ruby does not allow even <code>self</code> as receiver, if stated explicitly!</p>

<p>One more aspect to note is the third privacy level in Ruby, <code>protected</code>. This level is like “private,” in that it is used to specify methods that are part of the <em>implementation</em>, not the <em>interface</em>, but different in that these methods can be accessed through an explicit receiver, by members of the same class or any subclasses</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
</pre></td>
  <td class="code"><pre><span class="keyword">class</span> <span class="class">Test</span>
  <span class="keyword">def</span> <span class="function">initialize</span>(name)
    <span class="instance-variable">@name</span> = name
  <span class="keyword">end</span>

  <span class="keyword">def</span> <span class="function">hi</span>(test)
    puts <span class="string"><span class="delimiter">&quot;</span><span class="content">hi, test instance</span><span class="delimiter">&quot;</span></span>
    test.hello
  <span class="keyword">end</span>

  protected
    <span class="keyword">def</span> <span class="function">hello</span>
      puts <span class="string"><span class="delimiter">&quot;</span><span class="content">hello, i'm '</span><span class="inline"><span class="inline-delimiter">#{</span><span class="instance-variable">@name</span><span class="inline-delimiter">}</span></span><span class="content">'</span><span class="delimiter">&quot;</span></span>
    <span class="keyword">end</span>
<span class="keyword">end</span>

test1 = <span class="constant">Test</span>.new(<span class="string"><span class="delimiter">&quot;</span><span class="content">1</span><span class="delimiter">&quot;</span></span>)
test2 = <span class="constant">Test</span>.new(<span class="string"><span class="delimiter">&quot;</span><span class="content">2</span><span class="delimiter">&quot;</span></span>)

test1.hi(test2)
<span class="comment"># =&gt; hi, test instance</span>
<span class="comment"># =&gt; hello, i'm '2'</span>
</pre></td>
</tr></table>
</div>

<p>This is less used that public and private methods, but useful when some bit of data might be changed by other instances.</p>

<p>Finally, these are <em>guidelines</em>, promises as it were. It is easy, however, to circumvent the privacy by using some of the metaprogramming facilities in Ruby. See, for instance, http://gnuu.org/2011/01/01/rubys-private-keyword-is-not-heresy/, for a discussion of the problem theoretically. See</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inheritance vs. Mixins]]></title>
    <link href="http://imurchie.github.io/blog/blog/2013/12/01/inheritance/"/>
    <updated>2013-12-01T13:08:46-08:00</updated>
    <id>http://imurchie.github.io/blog/blog/2013/12/01/inheritance</id>
    <content type="html"><![CDATA[<p>In thinking through how we might change chess game to use a mixin model instead of an inheritance. Our main object model at the moment looks like:</p>

<pre>
- Chess::
    - Game
    - Board
        - Piece (abstract)
            - Pawn
            - SteppingPiece (abstract)
                - King
                - Knight
            - SlidingPiece (abstract)
                - Queen
                - Rook
                - Bishop
</pre>

<p>It was difficult to think of logical units that the mixin modules would embody. In this class hierarchy all the parent classes make sense to me.</p>

<!-- more -->

<p>So I decided to look in the Ruby Core to see what the modules were. There are 18 in total (of 105 classes and modules (17%)). Some of them are basically namespace modules, containing constants (e.g., <a href="http://ruby-doc.org/core-1.9.3/Errno.html"><code>Errno</code></a> and <a href="http://ruby-doc.org/core-1.9.3/File/Constants.html"><code>File::Constants</code></a>), or a group of methods that any object might need to be able to deal with (e.g., process-level access, through the modules <a href="http://ruby-doc.org/core-1.9.3/Process.html"><code>Process</code></a> and <a href="http://ruby-doc.org/core-1.9.3/Process/Sys.html"><code>Process::Sys</code></a>, and their helpers in the modules <a href="http://ruby-doc.org/core-1.9.3/Process/GID.html"><code>Process::GID</code></a> and <a href="http://ruby-doc.org/core-1.9.3/Process/UID.html"><code>Process::UID</code></a>).</p>

<p>In the namespacing group are also two very important modules that have different uses. First is <a href="http://ruby-doc.org/core-1.9.3/Math.html"><code>Math</code></a>, which is constants and class methods, used atomically without ever being mixed in:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre>square_root = <span class="constant">Math</span>::sqrt(<span class="integer">25</span>)
<span class="comment"># 5.0</span>

log = <span class="constant">Math</span>::log(<span class="integer">49</span>, <span class="constant">Math</span>::<span class="constant">E</span>)
<span class="comment"># 3.8918202981106265</span>
</pre></td>
</tr></table>
</div>

<p>Second is the module that is mixed in to <em>every</em> object since it is mixed in to the parent of all classes, <a href="http://www.ruby-doc.org/core-1.9.3/Object.html"><code>Object</code></a> (except those classes that explicitly bypass <code>Object</code> by inheriting from the “blank slate,” <a href="http://www.ruby-doc.org/core-1.9.3/BasicObject.html"><code>BasicObject</code></a>). This module, <a href="http://ruby-doc.org/core-1.9.3/Kernel.html"><code>Kernel</code></a> gives <code>Object</code> and its descendents a number of utility methods for things like object conversion (e.g., <code>Kernel#Array</code>, and <code>Kernel#String</code>), some callback methods (e.g., <code>Kernel#at_exit</code> which runs the provided block on exit of the program), and, most importantly, the oft-used methods <code>puts</code>/<code>print</code> and <code>gets</code> (for basic IO) and <code>require</code> and <code>require_relative</code>, which bring other files into scope.</p>

<p>Interestingly, <code>Kernel</code> also is the source of the <code>lambda</code> method, which in use looks like a <a href="http://ruby-doc.org/docs/keywords/1.9/">keyword</a> or operator. So lambda creation is actually a method call that takes a block:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>proc = lambda { puts <span class="string"><span class="delimiter">&quot;</span><span class="content">We're in a lambda!</span><span class="delimiter">&quot;</span></span> }
proc.call
<span class="comment"># =&gt; We're in a lambda!</span>
</pre></td>
</tr></table>
</div>

<p>I am still looking around for where to find the “stabby” lambda syntax introduced in 1.9. It appears to be “syntactic sugar” that is hidden within the interpretter implementation (and so does not show up on method lists in the documentation, like <code>+=</code> is not listed for <code>Fixnum</code>).</p>

<p>Another type of module in the core, and probably the most used ones by application developers, are those describing a capability, named with an adjective: adding the capacity to be iterated over with <a href="http://ruby-doc.org/core-1.9.3/Enumerable.html"><code>Enumerable</code></a>, the capacity to be compared with <a href="http://ruby-doc.org/core-1.9.3/Comparable.html"><code>Comparable</code></a>, the capacity to do certain IO tasks with <a href="http://ruby-doc.org/core-1.9.3/IO/WaitReadable.html"><code>IO::WaitReadable</code></a> and <a href="http://ruby-doc.org/core-1.9.3/IO/WaitWritable.html"><code>IO::WaitWritable</code></a> (I assume… this is an area actively in need of documentation support).</p>

<p>I’m not sure that I’ve come to an answer to my original question (indeed, I’m pretty sure I did not), but what is available at the core of Ruby is much clearer, and therefore more usable.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterators and Parameter-passing]]></title>
    <link href="http://imurchie.github.io/blog/blog/2013/12/01/iterators/"/>
    <updated>2013-12-01T13:06:59-08:00</updated>
    <id>http://imurchie.github.io/blog/blog/2013/12/01/iterators</id>
    <content type="html"><![CDATA[<p>While pairing with people it has been a surprise that it is not generally known that Ruby will decompose subarrays when passing parameters in iterators. That is, for instance, when modelling the movement of a rook in chess, we could have the code:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
</pre></td>
  <td class="code"><pre><span class="comment"># offsets from the initial position, (x, y)</span>
offsets = [[<span class="integer">0</span>, <span class="integer">1</span>], [<span class="integer">1</span>, <span class="integer">1</span>], [<span class="integer">0</span>, <span class="integer">-1</span>], [<span class="integer">-1</span>, <span class="integer">-1</span>]]
offsets.each <span class="keyword">do</span> |offset|
  offset_x = offset[<span class="integer">0</span>]
  offset_y = offset[<span class="integer">1</span>]
  new_x, new_y = x + offset_x, y + offset_y

  <span class="comment"># ...</span>
<span class="keyword">end</span>
</pre></td>
</tr></table>
</div>

<!-- more -->

<p>But we could also not deal with the subarrays:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>offsets = [[<span class="integer">0</span>, <span class="integer">1</span>], [<span class="integer">1</span>, <span class="integer">1</span>], [<span class="integer">0</span>, <span class="integer">-1</span>], [<span class="integer">-1</span>, <span class="integer">-1</span>]]
offsets.each <span class="keyword">do</span> |offset_x, offset_y|
  new_x, new_y = x + offset_x, y + offset_y

  <span class="comment"># ...</span>
<span class="keyword">end</span>
</pre></td>
</tr></table>
</div>

<p>This is trivial here, but allows for more expressive code. In the latter, it is clear that each element of <code>offset</code> is not just an element, but is a container, and in that the first element is the horizontal offset, and the second is the vertical offset.</p>

<p>Further, we can have other nesting scenarios. One that comes to mind as neither unreasonable nor uncommon would be a <code>Hash</code> containing location data:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre>locations = { <span class="symbol">:a</span> =&gt; [<span class="integer">2</span>, <span class="integer">5</span>], <span class="symbol">:b</span> =&gt; [<span class="integer">6</span>, <span class="integer">8</span>] }
<span class="comment"># or = { a: [2, 5], b: [6, 8] }</span>

<span class="comment"># get all that are beyond (4, 4)</span>
far_locations = locations.select <span class="keyword">do</span> |name, (x, y)|
  x &gt; <span class="integer">4</span> &amp;&amp; y &gt; <span class="integer">4</span>
<span class="keyword">end</span>

p far_locations
<span class="comment"># =&gt; {:b=&gt;[6, 8]}</span>
</pre></td>
</tr></table>
</div>

<p>Excellent! Expressive!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Idioms and Habits]]></title>
    <link href="http://imurchie.github.io/blog/blog/2013/11/30/idioms/"/>
    <updated>2013-11-30T11:35:00-08:00</updated>
    <id>http://imurchie.github.io/blog/blog/2013/11/30/idioms</id>
    <content type="html"><![CDATA[<p>I am slowly to have in mind Ruby idioms for things that I would initially turn to manual techniques. The first that comes to mind is iterating over an array and a sub-array one shorter. How I would have done it:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre>array = [<span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>, <span class="integer">5</span>, <span class="integer">6</span>]

i = <span class="integer">0</span>
array.each <span class="keyword">do</span> |el|
  j = i + <span class="integer">1</span>
  <span class="keyword">while</span> j &lt; array.length
    <span class="comment"># process el (or array[i]) and array[j]</span>

    j += <span class="integer">1</span>
  <span class="keyword">end</span>

  i += <span class="integer">1</span>
<span class="keyword">end</span>
</pre></td>
</tr></table>
</div>

<p>Which basically Ruby-ifies a C-style for-loop implementation</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre>for(int i=0; i&lt;array.length; i++)
  for(int j=i+1; j&lt;array.length; j++)
    # process array[i] and array[j]
  end
end
</pre></td>
</tr></table>
</div>

<p>However, Ruby can do this in a much better way, using <code lang="ruby">Array</code> and <code lang="ruby">Fixnum</code> methods:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
</pre></td>
  <td class="code"><pre><span class="comment"># using array indices so both sides are alike</span>
<span class="comment"># and the C implementation is better mirrored</span>
array.times <span class="keyword">do</span> |i|
  (i+<span class="integer">1</span>...array.length).times <span class="keyword">do</span> |j|
    <span class="comment"># process array[i] and array[j]</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>

<span class="comment"># or with an Arrray method</span>
array.each_with_index <span class="keyword">do</span> |el, i|
  (i+<span class="integer">1</span>...array.length).times <span class="keyword">do</span> |j|
    <span class="comment"># process el and array[j]</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
</pre></td>
</tr></table>
</div>

<p>The benefit of the last two Ruby implementations is that the programmer no longer needs to keep track of the indices. We are, as developers, left with making the logic of the data processing rather than the machinery of iterating over it.</p>

<p>While I knew the methods, until recently they hadn’t been in the fore of my mind when I arrive at a problem needing solving. I’m sure there are many more that will eventually percolate up so that they are the go-to implementations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blocks, Procs, Lambdas, Methods]]></title>
    <link href="http://imurchie.github.io/blog/blog/2013/11/30/block/"/>
    <updated>2013-11-30T08:14:45-08:00</updated>
    <id>http://imurchie.github.io/blog/blog/2013/11/30/block</id>
    <content type="html"><![CDATA[<p>Ruby has a number of ways to create callable bits of code: blocks, procs, lambdas, and methods.</p>

<!-- more -->

<p><em>Blocks</em></p>

<p>Blocks are the oddball in that they are not objects. They are anonymous bits of code that get sent to methods to be used in some way. Left to their own decides they remain anonymous:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre><span class="keyword">def</span> <span class="function">block_caller</span>
  <span class="keyword">yield</span>
<span class="keyword">end</span>

block_caller { puts <span class="string"><span class="delimiter">&quot;</span><span class="content">in a block</span><span class="delimiter">&quot;</span></span> }
<span class="comment"># =&gt; in a block</span>
</pre></td>
</tr></table>
</div>

<p>Here there are no named references to the block sent in to <code>block_caller</code>, just the keyword <code>yield</code> which yields control to any block the method knows of. Outside the method there is no way to access the code in that block.</p>

<p>Blocks are probably the most common form of this sort of behaviour in Ruby. Within both the Ruby core and the standard library there are a miriad methods that use blocks to customize their own behaviour. So, sorting an <code>Array</code> will, on its own, be in ascending order of the. But it can take a block, the result of running of which will determine how the sorting occurs:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>irb(main):<span class="integer">011</span>:<span class="integer">0</span>&gt; array = [<span class="integer">3</span>, <span class="integer">4</span>, <span class="integer">2</span>, <span class="integer">5</span>, <span class="integer">1</span>]
=&gt; [<span class="integer">3</span>, <span class="integer">4</span>, <span class="integer">2</span>, <span class="integer">5</span>, <span class="integer">1</span>]
irb(main):<span class="integer">012</span>:<span class="integer">0</span>&gt; array.sort
=&gt; [<span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>, <span class="integer">5</span>]
irb(main):<span class="integer">013</span>:<span class="integer">0</span>&gt; array.sort { |a, b| b &lt;=&gt; a }
=&gt; [<span class="integer">5</span>, <span class="integer">4</span>, <span class="integer">3</span>, <span class="integer">2</span>, <span class="integer">1</span>]
</pre></td>
</tr></table>
</div>

<p>Tada!</p>

<p><em>Procs</em></p>

<p><code>Proc</code>s act much like blocks, but are fullfledged objects, and can be referenced and manipulated like any other object. Moreover, blocks and <code>Proc</code>s can be interchanged while calling methods, using the <code>&amp;</code> keyword.</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
</pre></td>
  <td class="code"><pre><span class="keyword">def</span> <span class="function">block_caller</span>
  <span class="keyword">yield</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">test</span><span class="delimiter">&quot;</span></span>)
<span class="keyword">end</span>

<span class="keyword">def</span> <span class="function">proc_block_caller</span>(&amp;prc)
  prc.call(<span class="string"><span class="delimiter">&quot;</span><span class="content">test</span><span class="delimiter">&quot;</span></span>)
<span class="keyword">end</span>

<span class="keyword">def</span> <span class="function">proc_caller</span>(prc)
  prc.call(<span class="string"><span class="delimiter">&quot;</span><span class="content">test</span><span class="delimiter">&quot;</span></span>)
<span class="keyword">end</span>

prc = <span class="constant">Proc</span>.new { |input| puts input }
<span class="comment"># or: prc = proc { |input| puts input }</span>

block_caller(&amp;prc)
<span class="comment"># =&gt; test</span>

proc_block_caller { |input| puts input }
<span class="comment"># =&gt; test</span>

proc_caller(prc)
<span class="comment"># =&gt; test</span>
</pre></td>
</tr></table>
</div>

<p>In the first, we send a <code>Proc</code> as a block to the method, then a block as a <code>proc</code>, and finally a <code>Proc</code> as a normal argument to the method. All three result in the same functionality.</p>

<p>Further, both blocks and <code>Proc</code>s are allocated on the heap, and so any return statement executed within them will return <em>from the context in which they are called</em>, not just from themselves:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
</pre></td>
  <td class="code"><pre><span class="keyword">def</span> <span class="function">yielding_method</span>
  puts <span class="string"><span class="delimiter">&quot;</span><span class="content">yielding to block</span><span class="delimiter">&quot;</span></span>
  <span class="keyword">yield</span>
  puts <span class="string"><span class="delimiter">&quot;</span><span class="content">yielded to block</span><span class="delimiter">&quot;</span></span>
<span class="keyword">end</span>

yielding_method { puts <span class="string"><span class="delimiter">&quot;</span><span class="content">in block</span><span class="delimiter">&quot;</span></span> }
<span class="comment"># =&gt; yielding to block</span>
<span class="comment"># =&gt; in block</span>
<span class="comment"># =&gt; yielded to block</span>

yielding_method { puts <span class="string"><span class="delimiter">&quot;</span><span class="content">in block</span><span class="delimiter">&quot;</span></span>; <span class="keyword">return</span> <span class="predefined-constant">true</span> }
<span class="comment"># =&gt; yielding to block</span>
<span class="comment"># =&gt; in block</span>

<span class="comment"># in the default scope</span>
<span class="constant">Proc</span>.new { <span class="keyword">return</span> <span class="predefined-constant">true</span> }.call
<span class="comment"># =&gt; LocalJumpError: unexpected return</span>
<span class="comment"># =&gt;    ...</span>
</pre></td>
</tr></table>
</div>

<p>On the same lines, neither blocks nor <code>Proc</code>s do any checking of the arguments being passed in.</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
</pre></td>
  <td class="code"><pre>prc = <span class="constant">Proc</span>.new { |arg1, arg2| puts <span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">#{</span>arg1.inspect<span class="inline-delimiter">}</span></span><span class="content">, </span><span class="inline"><span class="inline-delimiter">#{</span>arg2.inspect<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span> }
prc.call(<span class="string"><span class="delimiter">&quot;</span><span class="content">first argument</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">second argument</span><span class="delimiter">&quot;</span></span>)
<span class="comment"># =&gt; &quot;first argument&quot;, &quot;second argument&quot;</span>

prc.call(<span class="string"><span class="delimiter">&quot;</span><span class="content">first argument</span><span class="delimiter">&quot;</span></span>)
<span class="comment"># =&gt; &quot;first argument&quot;, nil</span>

prc.call(<span class="string"><span class="delimiter">&quot;</span><span class="content">first argument</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">second argument</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">third argument</span><span class="delimiter">&quot;</span></span>)
<span class="comment"># =&gt; &quot;first argument&quot;, &quot;second argument&quot;</span>
</pre></td>
</tr></table>
</div>

<p>See <code>Lambda</code> below for more details, and a contrastive view.</p>

<p><em>Lambdas</em></p>

<p>In maths, starting with Alonzo Church (DATES?) and his <em>Lambda Calculus</em>, <em>λ</em> is used to refer to a function and the ordered list of arguments the function needs. This terminology was taken up by the creators of Lisp to refer to the same thing, in the programming realm. Indeed, John McCarthy, who developed the language in 1958, makes the ties clear in his 1960 paper on Lisp, “Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I.”</p>

<p>In Ruby, Lambdas behave like methods in ways that blocks and procs don’t. The two most important aspects of this functionality are</p>

<ol>
  <li>Stack memory vs. heap memory: Like full-fledged methods, Lambdas get space allocated on the call stack, rather than in the heap. In normal operation, this manifests itself in the ability of Lambdas to make explicit returns with method-like results.</li>
</ol>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre><span class="keyword">def</span> <span class="function">yielding_method</span>
  puts <span class="string"><span class="delimiter">&quot;</span><span class="content">yielding to block</span><span class="delimiter">&quot;</span></span>
  <span class="keyword">yield</span>
  puts <span class="string"><span class="delimiter">&quot;</span><span class="content">yielded to block</span><span class="delimiter">&quot;</span></span>
<span class="keyword">end</span>

l = lambda { puts <span class="string"><span class="delimiter">&quot;</span><span class="content">in lambda</span><span class="delimiter">&quot;</span></span>; <span class="keyword">return</span> <span class="predefined-constant">true</span> }
<span class="comment"># or: l = -&gt; { ... }</span>

yielding_method &amp;l
<span class="comment"># =&gt; yielding to block</span>
<span class="comment"># =&gt; in lambda</span>
<span class="comment"># =&gt; yielded to block</span>
</pre></td>
</tr></table>
</div>

<ol>
  <li>Arity checking: Also like full-fledged methods, lambdas get checked to make sure the arguments are of the necessary types, given the parameter list.</li>
</ol>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre>l = lambda { |arg1, arg2| puts <span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">#{</span>arg1<span class="inline-delimiter">}</span></span><span class="content">, </span><span class="inline"><span class="inline-delimiter">#{</span>arg2<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span> }
l.call(<span class="string"><span class="delimiter">&quot;</span><span class="content">first argument</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">second argument</span><span class="delimiter">&quot;</span></span>)
<span class="comment"># =&gt; first argument, second argument</span>

l.call(<span class="string"><span class="delimiter">&quot;</span><span class="content">first argument</span><span class="delimiter">&quot;</span></span>)
<span class="comment"># -&gt; ArgumentError: wrong number of arguments (1 for 2)</span>
<span class="comment"># -&gt;     ...</span>

l.call(<span class="string"><span class="delimiter">&quot;</span><span class="content">first argument</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">second argument</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">third argument</span><span class="delimiter">&quot;</span></span>)
<span class="comment"># -&gt; ArgumentError: wrong number of arguments (3 for 2)</span>
<span class="comment"># -&gt;     ...</span>
</pre></td>
</tr></table>
</div>

<p><code>Lambda</code>s are, however, much less commonly used in Ruby development.</p>

<p><em>Methods</em></p>

<p>The last type of callable object is the <code>Method</code>. Normally, methods are of a different sort than blocks, <code>Proc</code>s, or <code>Lambda</code>s, since they are tied to classes (even in the case of singleton methods, which are part of a singleton (or “eigen-“) class). But they can be freed from a class and passed as a callable object in their own right. Calling the <code>Object#method</code> method returns a <code>Method</code> object that can be passed around and used much like a <code>Proc</code>.</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>meth = <span class="string"><span class="delimiter">&quot;</span><span class="content">a lowercase string</span><span class="delimiter">&quot;</span></span>.method(<span class="symbol">:upcase</span>)
meth.call
<span class="comment"># =&gt; A LOWERCASE STRING</span>

<span class="comment"># a Proc can be obtained from a Method</span>
prc = meth.to_proc
prc.call
<span class="comment"># =&gt; A LOWERCASE STRING</span>
</pre></td>
</tr></table>
</div>

<p>In all, these objects (and non-objects, in the case of blocks) are part of the dynamicity of Ruby as a programming language. They are also one of the most interesting features of the language, importing as they do functional programming techniques to the object-oriented world.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String Concatenation]]></title>
    <link href="http://imurchie.github.io/blog/blog/2013/11/30/string-concatenation/"/>
    <updated>2013-11-30T08:08:28-08:00</updated>
    <id>http://imurchie.github.io/blog/blog/2013/11/30/string-concatenation</id>
    <content type="html"><![CDATA[<p>The literature says that <code>String#&lt;&lt;</code> is preferable to <code>String#+</code>. Why? One metric is speed. The following Ruby code snippet:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre><span class="constant">Benchmark</span>.bm <span class="keyword">do</span> |b|
  b.report(<span class="string"><span class="delimiter">&quot;</span><span class="content">+:  </span><span class="delimiter">&quot;</span></span>) <span class="keyword">do</span>
    string = <span class="string"><span class="delimiter">&quot;</span><span class="content">test</span><span class="delimiter">&quot;</span></span>
    <span class="integer">100_000</span>.times { string += <span class="string"><span class="delimiter">&quot;</span><span class="content">another</span><span class="delimiter">&quot;</span></span> }
  <span class="keyword">end</span>
  b.report(<span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;&lt;: </span><span class="delimiter">&quot;</span></span>) <span class="keyword">do</span>
    string = <span class="string"><span class="delimiter">&quot;</span><span class="content">test</span><span class="delimiter">&quot;</span></span>
    <span class="integer">100_000</span>.times { string &lt;&lt; <span class="string"><span class="delimiter">&quot;</span><span class="content">another</span><span class="delimiter">&quot;</span></span> }
  <span class="keyword">end</span>
<span class="keyword">end</span>
</pre></td>
</tr></table>
</div>

<p>Yields the following data:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>      user       system    total       real
+:    8.960000   2.750000  11.710000 ( 11.735344)
&lt;&lt;:   0.020000   0.000000   0.020000 (  0.019966)
</pre></td>
</tr></table>
</div>

<p>So it appears that concatenation with the <code>&lt;&lt;</code> method is much faster. (As a side note, <code>String#concat</code> and <code>String#&lt;&lt;</code> are aliases.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging]]></title>
    <link href="http://imurchie.github.io/blog/blog/2013/11/30/debugging/"/>
    <updated>2013-11-30T08:01:53-08:00</updated>
    <id>http://imurchie.github.io/blog/blog/2013/11/30/debugging</id>
    <content type="html"><![CDATA[<blockquote>
  <p>“Everyone knows that debugging is twice as hard as writing a program in the first place. So if you’re as clever as you can be when you write it, how will you ever debug it?”</p>
</blockquote>

<p>— Brian Kernighan (Elements of Programming Style, Chapter 2).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coupling]]></title>
    <link href="http://imurchie.github.io/blog/blog/2013/11/29/coupling/"/>
    <updated>2013-11-29T09:00:43-08:00</updated>
    <id>http://imurchie.github.io/blog/blog/2013/11/29/coupling</id>
    <content type="html"><![CDATA[<p>One of the problems encountered in designing systems is keeping the <em>coupling</em> between components loose. That is, making each object only know as much about the others as it absolutely needs.</p>

<p>Jim Weirich gave a talk at the <em>Distill</em> conference on the topic of “connascence,” or the coming-into-being-together. His idea was that there are two related phenomena in software design: <em>coupling</em> and <em>coherence</em>.</p>

<p><em>Coupling</em> occurs between two pieces of software (from separate systems talking to each other all the way down to two objects within the same program). If two elements <code>A</code> and <code>B</code> are <em>coupled</em>, changing <code>A</code> forces a change in <code>B</code>, and (likely) vice versa.</p>

<!-- more -->

<p>The former is bad, linking two different elements together, which the latter is good, tying everything within a single element into a cohesive unit.</p>

<p>The two nicely sum up the values inculcated in the curriculum, that classes ought to model one thing and one thing only, with all the state and behaviour being ordered toward that thing. The same principle applies to methods, which are short and do a single thing.</p>

<p>On the other side of the design of classes and methods, which are coherent to the object being modelled, only those <em>currently</em> necessary should be exposed in the interface. Many methods that are in a class have no reason to be publicly available.</p>

<p>Weirich enumerated nine types of connascence, depending on how the two elements are related:
1.  Name: two elements refer to each other by name
2.  Position: (e.g., ordering of arrays, parameter lists)
3.  Meaning: must both agree on meaning of some data
4.  Algorithm: two components agree on algorithms (e.g., checksums)
5.  Type: agree on the type of elements
6.  Execution: order of steps might be required
7.  Timing: elements related by some time condition (e.g., race conditions, timeout, etc.)
8.  Value: values related by constraints (e.g., three sides to a triangle)
9.  Identity: sharing an object
In all these cases, when the related elements are in different classes (and often within the same class), this is moving toward bad (though some are unavoidable… things need to be named and need to be referred to by those names). The first five are <em>static</em>, depending only on how they are declared and defined. The last four are dynamic, coming about in the running of the software.</p>

<p>Some major sources of coupling include parameter lists that are more than 2–3 elements long,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre><span class="keyword">def</span> <span class="function">many_parametered_method</span>(name, date, signup_date, mothers_maiden_name)
</pre></td>
</tr></table>
</div>

<p>Which is easily misused, and difficult to change. This is connascence of Name, Position, Meaning, and Type. However, changing this to an associative array makes it easier for callers to get things right,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>        <span class="keyword">def</span> <span class="function">method</span>(params = {})

        method({ <span class="key">name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Isaac</span><span class="delimiter">&quot;</span></span>, <span class="key">date</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">18/9/13</span><span class="delimiter">&quot;</span></span>, <span class="key">signup_date</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">18/9/13</span><span class="delimiter">&quot;</span></span>, <span class="key">mothers_maiden_name</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Something</span><span class="delimiter">&quot;</span></span> })
</pre></td>
</tr></table>
</div>

<p>Now the order doesn’t matter, though we still have coupling of name (is it <code>name</code> or <code>fullname</code>).</p>

<p>In a different realm, there is a similar concept called “supervenience”, such that:</p>

<blockquote>
  <p>“A set of properties A supervenes upon another set B just in case no two things can differ with respect to A-properties without also differing with respect to their B-properties.”
<a href="http://plato.stanford.edu/entries/supervenience/"><em>Stanford Encyclopedia of Philosophy</em></a></p>
</blockquote>

<p>I’ll just leave that out there for myself to think about.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design]]></title>
    <link href="http://imurchie.github.io/blog/blog/2013/11/29/design/"/>
    <updated>2013-11-29T09:00:15-08:00</updated>
    <id>http://imurchie.github.io/blog/blog/2013/11/29/design</id>
    <content type="html"><![CDATA[<p>Russ Olson, in his book <em>Design Patterns in Ruby</em> (an abridged “Gang of Four” book, with implementations in Ruby), he lays out the principles that underly his approach, and which mesh well with the curriculum:</p>

<blockquote>
  <p>For me, these ideas boil down to four points:
1.  Separate out the things that change from those that stay the same.
2.  Program to an interface, not an implementation.
3.  Prefer composition over inheritance.
4.  Delegate, delegate, delegate.
To These, I would like to add one idea that is not really mentioned in _Design Patterns, but that guides much of my own approach to building programs:
5.  You ain’t gonna need it.</p>
</blockquote>

<!-- more -->

<p>The first four are identical to the guiding principles of the “Gang of Four.” In order to make robust software systems the places where things change should be identifiable, and ideally minimized (particularly in their public interface, so making a change does not effect, domino-like, other parts of the system). This relates directly to the idea of an interface (not of the C++/Java sort): the public facing parts of the class (or other object) should be as stable as possible, and it is more important to keep them functioning correctly. The implementation matters less, and what implementation is used might be decided using other considerations (e.g., efficiency, stability, auditability).</p>

<p>The third part of this is an interesting one, and the subject of a recent blog post by <a href="http://words.steveklabnik.com/">Steve Klabnik</a>, <a href="http://words.steveklabnik.com/beware-subclassing-ruby-core-classes">“Beware subclassing Ruby core classes”</a>. Ruby only supports single inheritance, so inheriting from one class precludes doing so with another class. However, the central problem of inheritance is the tight coupling that comes about between the class and its superclass. Change the parent and the functionality of the child is suspect.</p>

<p>The fourth point is just passing the responsibility to something else. This is key to the idea of <em>D.R.Y</em> (“Don’t Repeat Yourself”), since two elements that do the same thing can delegate to a third that actually does it.</p>

<p>The final part of Olson’s discussion is part of our curriculum directly: If it is not necessary at this time, don’t build it. Speculation almost never gets it right. I’m reminded of Cory Doctorow’s position on science fiction writers:
&gt; “I’m of the opinion that science fiction writers suck at predicting the future. We mostly go around describing the present in futuristic clothes - (such as) Mary Shelley, Bill Gibson, and many others.”
&gt; <a href="http://3degree.ecu.edu.au/articles/1378">“Where is my flying car”</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Symbols]]></title>
    <link href="http://imurchie.github.io/blog/blog/2013/11/28/ruby-symbols/"/>
    <updated>2013-11-28T21:34:40-08:00</updated>
    <id>http://imurchie.github.io/blog/blog/2013/11/28/ruby-symbols</id>
    <content type="html"><![CDATA[<p>Ruby <code lang="ruby">Symbol</code>s are interesting things, conceptually straddling the line separating themselves from <code lang="ruby">String</code>s. They do not, however, have any content of their own. They are, basically, the logical endpoint of the <em>nominitive</em> case in case-based grammars.</p>

<p>As we know from the Sanskrit grammarians,</p>

<blockquote>
  prātipadikārthaliṅgaparimāṇavacanamātre prathamā
  (Pā. 2.3.46)
</blockquote>

<p>Which is to say, the “first,” or nominative, case is used in the sense of merely (<em>mātre</em>) the lexical meaning of the nominal base (<em>prātipadikārtha</em>), its gender (<em>liṅga</em>), its measure (<em>parimāṇa</em>), or its number (<em>vacana</em>)</p>

<!-- more -->

<p>So the nominitive, in Sanskrit grammar, conveys most prominently (grammatically, a <em>dvandva</em> functioning as ordered-by-preference) the bare meaning of the lexical stem. And this is what Ruby <code>Symbol</code>s do! They convey information only insofar as they are named usefully. Their main purpose is as… well… <em>symbols</em>.</p>

<p>One thing of note is that within a Ruby interpretter, there is only ever <em>one</em> copy of any given <code lang="ruby">Symbol</code>. So checking for equality is fast, the equality being directly testable through the <code lang="ruby">Symbol</code>s identity.</p>

<p>So, for instance, if we have a <code lang="ruby">Hash</code> object that has <code lang="ruby">String</code> keys,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre>person = {
  <span class="string"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>    =&gt; <span class="string"><span class="delimiter">&quot;</span><span class="content">Isaac</span><span class="delimiter">&quot;</span></span>,
  <span class="string"><span class="delimiter">&quot;</span><span class="content">tumblr</span><span class="delimiter">&quot;</span></span>  =&gt; <span class="string"><span class="delimiter">&quot;</span><span class="content">isaac-codes</span><span class="delimiter">&quot;</span></span>
}
</pre></td>
</tr></table>
</div>

<p>When we access an element from the <code lang="ruby">Hash</code>,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre>name = person[<span class="string"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>]
</pre></td>
</tr></table>
</div>

<p>The operation needs to check the keys for the <code lang="ruby">String</code> “<code lang="ruby">name</code>”, which means checking that the first letter is “n”, the second “a” etc. etc. ad nauseum.</p>

<p>If, on the other hand, we use <code lang="ruby">Symbol</code>s for the keys,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre>person = {
  <span class="key">name</span>:   <span class="string"><span class="delimiter">&quot;</span><span class="content">Isaac</span><span class="delimiter">&quot;</span></span>,
  <span class="key">tumblr</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">isaac-codes</span><span class="delimiter">&quot;</span></span>
}
</pre></td>
</tr></table>
</div>

<p>When we access an element,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre>name = person[<span class="symbol">:name</span>]
</pre></td>
</tr></table>
</div>

<p>The equality operation merely tests whether the two <code lang="ruby">Symbol</code>s occupy the same position in memory! The <em>C</em> code for the operation is simple,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre><span class="directive">static</span> VALUE
sym_equal(VALUE sym1, VALUE sym2) {
  <span class="keyword">if</span> (sym1 == sym2) <span class="keyword">return</span> Qtrue;
  <span class="keyword">return</span> Qfalse;
}
</pre></td>
</tr></table>
</div>

<p>We can see, therefore that comparison is O(1) for the <code lang="ruby">Symbol</code>!</p>

<p>This simplicty, however, leads to one major potential problem in the use of <code lang="ruby">Symbol</code>s, as noted in the curriculum. Since <code lang="ruby">Symbol</code>s aren’t referenced by anything, there is no indicator of their going “out of scope,” and so no possibility for the Garbage Collector to release them from memory. So every <code lang="ruby">Symbol</code> created in the course of running a Ruby script continues to exist in memory. They are, therefore, unsuitable for “situations where you could have an unbounded number of unique
symbol values” (http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/164890).</p>

<p>The practical take-away of this is to manage well what is being converted into a symbol. Repeatedly used <code lang="ruby">Hash</code> keys, like those to the Rack/Rails <code lang="ruby">params</code> hash, are fine. But converting <em>ad hoc</em> <code lang="ruby">String</code>s into <code lang="ruby">Symbol</code>s is asking for problems on any non-trivial system.</p>

<p>If, for instance, we took a user’s name and converted it to a   <code lang="ruby">Symbol</code> for insertion into a <code lang="ruby">Hash</code>,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>users = {}
username = <span class="string"><span class="delimiter">&quot;</span><span class="content">Isaac</span><span class="delimiter">&quot;</span></span>
users[username.to_sym] = <span class="string"><span class="delimiter">&quot;</span><span class="content">Present</span><span class="delimiter">&quot;</span></span>
</pre></td>
</tr></table>
</div>

<p>And we extend the system to handle a million users, the memory usage will balloon! To illustrate,</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
</pre></td>
  <td class="code"><pre>irb(main):<span class="integer">001</span>:<span class="integer">0</span>&gt; <span class="shell"><span class="delimiter">`</span><span class="content">ps -o rss= -p </span><span class="inline"><span class="inline-delimiter">#{</span><span class="constant">Process</span>.pid<span class="inline-delimiter">}</span></span><span class="delimiter">`</span></span>.to_i
=&gt; <span class="integer">19908</span>
irb(main):<span class="integer">002</span>:<span class="integer">0</span>&gt; users = {}
=&gt; {}
irb(main):<span class="integer">003</span>:<span class="integer">0</span>&gt; <span class="integer">1_000_000</span>.times <span class="keyword">do</span> |i|
irb(main):<span class="integer">004</span>:<span class="integer">1</span>*   username = <span class="string"><span class="delimiter">&quot;</span><span class="content">user_</span><span class="inline"><span class="inline-delimiter">#{</span>i<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>
irb(main):<span class="integer">005</span>:<span class="integer">1</span>&gt;   users[username.to_sym] = <span class="predefined-constant">true</span>
irb(main):<span class="integer">006</span>:<span class="integer">1</span>&gt;   <span class="keyword">end</span>
=&gt; <span class="integer">1000000</span>
irb(main):<span class="integer">007</span>:<span class="integer">0</span>&gt; <span class="shell"><span class="delimiter">`</span><span class="content">ps -o rss= -p </span><span class="inline"><span class="inline-delimiter">#{</span><span class="constant">Process</span>.pid<span class="inline-delimiter">}</span></span><span class="delimiter">`</span></span>.to_i
=&gt; <span class="integer">259360</span>
irb(main):<span class="integer">00</span><span class="integer">8</span>:<span class="integer">0</span>&gt; <span class="constant">GC</span>.start()
=&gt; <span class="predefined-constant">nil</span>
irb(main):<span class="integer">00</span><span class="integer">9</span>:<span class="integer">0</span>&gt; <span class="shell"><span class="delimiter">`</span><span class="content">ps -o rss= -p </span><span class="inline"><span class="inline-delimiter">#{</span><span class="constant">Process</span>.pid<span class="inline-delimiter">}</span></span><span class="delimiter">`</span></span>.to_i
=&gt; <span class="integer">259804</span>
irb(main):<span class="integer">010</span>:<span class="integer">0</span>&gt; users = <span class="predefined-constant">nil</span>
=&gt; <span class="predefined-constant">nil</span>
irb(main):<span class="integer">011</span>:<span class="integer">0</span>&gt; <span class="constant">GC</span>.start()
=&gt; <span class="predefined-constant">nil</span>
irb(main):<span class="integer">012</span>:<span class="integer">0</span>&gt; <span class="shell"><span class="delimiter">`</span><span class="content">ps -o rss= -p </span><span class="inline"><span class="inline-delimiter">#{</span><span class="constant">Process</span>.pid<span class="inline-delimiter">}</span></span><span class="delimiter">`</span></span>.to_i
=&gt; <span class="integer">259828</span>
</pre></td>
</tr></table>
</div>

<p>Even after garbage collecting, there is no decrease in memory usage. (On a side note, there are issues within the field of garbage collection to be kept in mind. Particularly, it seems that no system is actually particularly likely to free any memory. See, for instance, http://stackoverflow.com/questions/1119134/how-do-malloc-and-free-work/5532547#5532547.)</p>

]]></content>
  </entry>
  
</feed>
